package bot

import (
    "context"
    tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
    "go.uber.org/zap"
)

func (b *Bot) HandleStart(ctx context.Context, chatID int64) {
    text := `–ü—Ä–∏–≤–µ—Ç! üëã

    ‚ö†Ô∏è –ü—Ä–µ–∂–¥–µ —á–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.
    –ò—Å–ø–æ–ª—å–∑—É—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

    –ï—Å–ª–∏ –≤—Å—ë –æ–∫ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá`

    msg := tgbotapi.NewMessage(chatID, text)
    msg.ReplyMarkup = b.CreatePrivacyAgreementKeyboard()
    b.SendMessage(msg)
    
    if err := b.state.SetStep(ctx, chatID, StepPrivacyAgreement); err != nil {
        b.logger.Error("Failed to set privacy agreement state",
            zap.Int64("chat_id", chatID),
            zap.Error(err))
    }
}

func (b *Bot) HandleError(ctx context.Context, chatID int64, errorMsg string) {
    step, err := b.state.GetStep(ctx, chatID)
    if err != nil {
        step = ""
    }

    var keyboard tgbotapi.ReplyKeyboardMarkup

    switch step {
    case StepDimensions:
        keyboard = b.CreateDimensionsKeyboard()
    case StepDateSelection:
        keyboard = b.CreateDateSelectionKeyboard()
    case StepServiceType:
        keyboard = b.CreateServiceTypeKeyboard()
    case StepManualDateInput:
        keyboard = tgbotapi.NewReplyKeyboard(
            tgbotapi.NewKeyboardButtonRow(
                tgbotapi.NewKeyboardButton("–ù–∞–∑–∞–¥"),
            ),
        )
    default:
        keyboard = tgbotapi.NewReplyKeyboard(
            tgbotapi.NewKeyboardButtonRow(
                tgbotapi.NewKeyboardButton("/start"),
            ),
        )
    }

    msg := tgbotapi.NewMessage(chatID, "‚ùå "+errorMsg)
    msg.ReplyMarkup = keyboard
    b.SendMessage(msg)
}

func (b *Bot) HandleCancel(ctx context.Context, chatID int64) {
    // Get current step to determine where to return
    currentStep, err := b.state.GetStep(ctx, chatID)
    if err != nil {
        b.logger.Error("Failed to get current step",
            zap.Int64("chat_id", chatID),
            zap.Error(err))
        currentStep = "" // Default to start if cannot get step
    }

    var msg tgbotapi.MessageConfig
    var keyboard any

    switch currentStep {
    case StepDateSelection, StepManualDateInput, StepDateConfirmation:
        // Return to dimensions input
        msg = tgbotapi.NewMessage(chatID, "‚ùå –í—ã–±–æ—Ä –¥–∞—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω. –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã —Å–Ω–æ–≤–∞:")
        keyboard = b.CreateDimensionsKeyboard()
        b.state.SetStep(ctx, chatID, StepDimensions)

    case StepDimensions:
        // Return to service type selection
        msg = tgbotapi.NewMessage(chatID, "‚ùå –í–≤–æ–¥ —Ä–∞–∑–º–µ—Ä–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å–ª—É–≥–∏:")
        keyboard = b.CreateServiceTypeKeyboard()
        b.state.SetStep(ctx, chatID, StepServiceType)

    case CustomTextureInput:
        msg = tgbotapi.NewMessage(chatID, "‚ùå –í–≤–æ–¥ —Ç–µ–∫—Å—Ç—É—Ä—ã –æ—Ç–º–µ–Ω–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å–ª—É–≥–∏:")
        keyboard = b.CreateServiceTypeKeyboard()
        b.state.SetStep(ctx, chatID, StepServiceType)    

    default:
        // Default cancellation - clear all and return to start
        if err := b.state.ClearState(ctx, chatID); err != nil {
            b.logger.Error("Failed to clear state on cancel",
                zap.Int64("chat_id", chatID),
                zap.Error(err))
        }
        msg = tgbotapi.NewMessage(chatID, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ:")
        keyboard = tgbotapi.NewReplyKeyboard(
            tgbotapi.NewKeyboardButtonRow(
                tgbotapi.NewKeyboardButton("/start"),
            ),
        )
    }

    msg.ReplyMarkup = keyboard
    b.SendMessage(msg)
}


func (b *Bot) HandleDefault(ctx context.Context, chatID int64) {
	b.SendError(chatID, "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.")
}

func (b *Bot) HandleUnknownCommand(ctx context.Context, chatID int64) {
	b.SendError(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
}

func (b *Bot) HandleHelp(ctx context.Context, chatID int64) {
	helpText := `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
	/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
	/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

	–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.`
	
	msg := tgbotapi.NewMessage(chatID, helpText)
	b.SendMessage(msg)
}
