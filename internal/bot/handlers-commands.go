package bot

import (
	"context"
	"fmt"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"go.uber.org/zap"
)

func (b *Bot) HandleStart(ctx context.Context, chatID int64) {
	// Check signed TPA
	agreed, phone, err := b.storage.GetUserAgreement(ctx, chatID)
	if err != nil {
		b.logger.Error("Failed to check user agreement", zap.Error(err))
	}

	if agreed && phone != "" {
		// If user has signed TPA, show menu
		b.ShowMainMenu(ctx, chatID, phone)
		return
	}

	msg := tgbotapi.NewMessage(chatID, `–ü—Ä–∏–≤–µ—Ç! üëã

    ‚ö†Ô∏è –ü—Ä–µ–∂–¥–µ —á–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –≤—ã –¥–æ–ª–∂–Ω—ã —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å:
    1. –ù–∞—à–µ–π –ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
    2. Telegram Bot Privacy Policy (TPA)
    
    –ò—Å–ø–æ–ª—å–∑—É—è –±–æ—Ç–∞, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —ç—Ç–∏–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏.`)

	b.ShowPrivacyPolicy(chatID)

	msg.ReplyMarkup = b.CreatePrivacyAgreementKeyboard()
	b.SendMessage(msg)

	if err := b.state.SetStep(ctx, chatID, StepPrivacyAgreement); err != nil {
		b.logger.Error("Failed to set privacy agreement state",
			zap.Int64("chat_id", chatID),
			zap.Error(err))
	}
}

// ShowMainMenu displays the main menu with options for authenticated users
func (b *Bot) ShowMainMenu(ctx context.Context, chatID int64, phone string) {
    // Clear any previous order state while keeping essential user data
    if err := b.state.ResetOrderState(ctx, chatID); err != nil {
        b.logger.Error("Failed to reset order state",
            zap.Int64("chat_id", chatID),
            zap.Error(err))
        // Continue despite the error as it's not critical for showing the menu
    }

    // Save phone number if provided
    if phone != "" {
        if err := b.state.SetPhoneNumber(ctx, chatID, phone); err != nil {
            b.logger.Error("Failed to set phone number in state",
                zap.Int64("chat_id", chatID),
                zap.Error(err))
        }
    } else {
        b.logger.Warn("Empty phone number provided to ShowMainMenu",
            zap.Int64("chat_id", chatID))
    }

    // Format phone for display
    formattedPhone := "–Ω–µ —É–∫–∞–∑–∞–Ω"
    if phone != "" {
        formattedPhone = FormatPhoneNumber(phone)
    }

    msg := tgbotapi.NewMessage(chatID, fmt.Sprintf(
        "üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n"+
            "–í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä: %s\n"+
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        formattedPhone))
    
    msg.ReplyMarkup = b.CreateMainMenuKeyboard()
    msg.ParseMode = "Markdown"

    if _, err := b.bot.Send(msg); err != nil {
        b.logger.Error("Failed to send main menu",
            zap.Int64("chat_id", chatID),
            zap.Error(err))
        // Consider adding retry logic here if needed
    }
}

func (b *Bot) ShowPrivacyPolicy(chatID int64) {

	policyText := `üîê <b>–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</b>

    –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å:
    1. –ù–∞—à–µ–π –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
    2. Telegram Bot Privacy Policy (TPA)

    <u>–ú—ã —Å–æ–±–∏—Ä–∞–µ–º –∏ —Ö—Ä–∞–Ω–∏–º:</u>
    - –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞)
    - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–∫–∞–∑–∞ (—Ä–∞–∑–º–µ—Ä—ã, —Ç–µ–∫—Å—Ç—É—Ä–∞)
    - –î–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞

    <u>Telegram TPA —Ç—Ä–µ–±—É–µ—Ç:</u>
    - –Ø–≤–Ω–æ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö
    - –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–ø—Ä–æ—Å—É
    - –°–æ–±–ª—é–¥–µ–Ω–∏—è GDPR –∏ –¥—Ä—É–≥–∏—Ö —Ä–µ–≥—É–ª—è—Ü–∏–π

    üìú –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç: %s`

	msg := tgbotapi.NewMessage(
		chatID,
		fmt.Sprintf(policyText, "https://telegram.org/privacy-tpa"),
	)
	msg.ParseMode = "HTML"
	b.SendMessage(msg)
}

func (b *Bot) HandleError(ctx context.Context, chatID int64, errorMsg string) {
	step, err := b.state.GetStep(ctx, chatID)
	if err != nil {
		step = ""
	}

	var keyboard tgbotapi.ReplyKeyboardMarkup

	switch step {
	case StepDimensions:
		keyboard = b.CreateDimensionsKeyboard()
	case StepDateSelection:
		keyboard = b.CreateDateSelectionKeyboard()
	case StepServiceType:
		keyboard = b.CreateServiceTypeKeyboard()
	case StepManualDateInput:
		keyboard = tgbotapi.NewReplyKeyboard(
			tgbotapi.NewKeyboardButtonRow(
				tgbotapi.NewKeyboardButton("–ù–∞–∑–∞–¥"),
			),
		)
	default:
		keyboard = tgbotapi.NewReplyKeyboard(
			tgbotapi.NewKeyboardButtonRow(
				tgbotapi.NewKeyboardButton("/start"),
			),
		)
	}

	msg := tgbotapi.NewMessage(chatID, "‚ùå "+errorMsg)
	msg.ReplyMarkup = keyboard
	b.SendMessage(msg)
}

func (b *Bot) HandleCancel(ctx context.Context, chatID int64) {
	// Get current step to determine where to return
	currentStep, err := b.state.GetStep(ctx, chatID)
	if err != nil {
		b.logger.Error("Failed to get current step",
			zap.Int64("chat_id", chatID),
			zap.Error(err))
		currentStep = "" // Default to start if cannot get step
	}

	var msg tgbotapi.MessageConfig
	var keyboard any

	switch currentStep {
	case StepDateSelection, StepManualDateInput, StepDateConfirmation:
		// Return to dimensions input
		msg = tgbotapi.NewMessage(chatID, "‚ùå –í—ã–±–æ—Ä –¥–∞—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω. –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã —Å–Ω–æ–≤–∞:")
		keyboard = b.CreateDimensionsKeyboard()
		b.state.SetStep(ctx, chatID, StepDimensions)

	case StepDimensions:
		// Return to service type selection
		msg = tgbotapi.NewMessage(chatID, "‚ùå –í–≤–æ–¥ —Ä–∞–∑–º–µ—Ä–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å–ª—É–≥–∏:")
		keyboard = b.CreateServiceTypeKeyboard()
		b.state.SetStep(ctx, chatID, StepServiceType)

	case CustomTextureInput:
		msg = tgbotapi.NewMessage(chatID, "‚ùå –í–≤–æ–¥ —Ç–µ–∫—Å—Ç—É—Ä—ã –æ—Ç–º–µ–Ω–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å–ª—É–≥–∏:")
		keyboard = b.CreateServiceTypeKeyboard()
		b.state.SetStep(ctx, chatID, StepServiceType)

	case StepServiceType:
		msg = tgbotapi.NewMessage(chatID, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É —É—Å–ª—É–≥–∏")
		keyboard = b.CreateServiceTypeKeyboard()
		b.state.SetStep(ctx, chatID, StepServiceType)

	default:
		// Default cancellation - clear all and return to start
		if err := b.state.ClearState(ctx, chatID); err != nil {
			b.logger.Error("Failed to clear state on cancel",
				zap.Int64("chat_id", chatID),
				zap.Error(err))
		}
		msg = tgbotapi.NewMessage(chatID, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ:")
		keyboard = tgbotapi.NewReplyKeyboard(
			tgbotapi.NewKeyboardButtonRow(
				tgbotapi.NewKeyboardButton("/start"),
			),
		)
	}

	msg.ReplyMarkup = keyboard
	b.SendMessage(msg)
}

func (b *Bot) HandleDefault(ctx context.Context, chatID int64) {
	b.SendError(chatID, "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.")
}

func (b *Bot) HandleUnknownCommand(ctx context.Context, chatID int64) {
	b.SendError(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
}

func (b *Bot) HandleHelp(ctx context.Context, chatID int64) {
	helpText := `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
	/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
	/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

	–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.`

	msg := tgbotapi.NewMessage(chatID, helpText)
	b.SendMessage(msg)
}
