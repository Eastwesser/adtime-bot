package bot

import (
	"adtime-bot/internal/storage"
	"context"
	"fmt"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"go.uber.org/zap"
)

func (b *Bot) NotifyPrivacyAgreement(ctx context.Context, username string) {
    if b.cfg.Admin.ChannelID == 0 {
        b.logger.Warn("Channel notifications disabled - no channel ID configured")
        return
    }
    
    text := fmt.Sprintf("üîê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @%s –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.", username)

    msg := tgbotapi.NewMessage(b.cfg.Admin.ChannelID, text)
    
    if _, err := b.bot.Send(msg); err != nil {
        b.logger.Error("Failed to send privacy agreement notification to channel",
            zap.Error(err))
    }
}

// –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
func (b *Bot) NotifyNewOrderToChannel(ctx context.Context, order storage.Order, username string) {
    
    if b.cfg.Admin.ChannelID == 0 {
        b.logger.Warn("Channel notifications disabled - no channel ID configured")
        return
    }

    // Verify bot has proper permissions
    _, err := b.bot.GetChat(tgbotapi.ChatInfoConfig{
        ChatConfig: tgbotapi.ChatConfig{
            ChatID: b.cfg.Admin.ChannelID,
        },
    })
    if err != nil {
        b.logger.Error("Failed to verify channel access",
            zap.Int64("channel_id", b.cfg.Admin.ChannelID),
            zap.Error(err))
        return
    }

    // Add debug log to verify channel ID
    b.logger.Info("Preparing channel notification",
        zap.Int64("channel_id", b.cfg.Admin.ChannelID),
        zap.String("username", username))

    text := fmt.Sprintf(
        "üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #%d\n"+
        "–¢–∏–ø: %s\n"+
        "–†–∞–∑–º–µ—Ä: %dx%d —Å–º\n"+
        "–¶–µ–Ω–∞: %.2f —Ä—É–±\n"+
        "–ö–æ–Ω—Ç–∞–∫—Ç: %s\n"+
        "TG: @%s",
        order.ID, order.TextureName, 
        order.WidthCM, order.HeightCM,
        order.Price,
        FormatPhoneNumber(order.Contact),
        username,
    )

    msg := tgbotapi.NewMessage(b.cfg.Admin.ChannelID, text)
    msg.ParseMode = "HTML" // –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –≤–º–µ—Å—Ç–æ Markdown –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    
    if _, err := b.bot.Send(msg); err != nil {
        b.logger.Error("Failed to send channel notification",
            zap.Int64("order_id", order.ID),
            zap.Error(err))
    }
}

// –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –∏ Excel —Ñ–∞–π–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∞–¥–º–∏–Ω—É
func (b *Bot) NotifyAdmin(ctx context.Context, order storage.Order) {
    
    
    // doc := nil
    // doc.Caption = fmt.Sprintf("üìä –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #%d", order.ID)
    // if _, err := b.bot.Send(doc); err != nil {}
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if b.cfg.Admin.ChatID != 0 {
        b.sendAdminNotification(ctx, b.cfg.Admin.ChatID, order)
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –∞–¥–º–∏–Ω–∞–º
    for _, adminID := range b.cfg.Admin.IDs {
        if adminID != 0 {
            b.sendAdminNotification(ctx, adminID, order)
        }
    }
}

func (b *Bot) sendAdminNotification(ctx context.Context, chatID int64, order storage.Order) {
    
    if chatID == 0 {
        b.logger.Warn("Skipping notification to zero chat ID")
        return
    }
    
    // –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
    filepath, err := b.storage.ExportOrderToExcel(ctx, order)
    if err != nil {
        b.logger.Error("Failed to create Excel file for order",
            zap.Int64("order_id", order.ID),
            zap.Error(err))
        return
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
    msg := tgbotapi.NewMessage(chatID, FormatOrderNotification(order))
    if _, err := b.bot.Send(msg); err != nil {
        b.logger.Error("Failed to send order notification",
            zap.Int64("chat_id", chatID),
            zap.Error(err))
        return
    }
    msg.ParseMode = "Markdown"
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    markup := tgbotapi.NewInlineKeyboardMarkup(
        tgbotapi.NewInlineKeyboardRow(
            tgbotapi.NewInlineKeyboardButtonData("‚úÖ –í –æ–±—Ä–∞–±–æ—Ç–∫—É", fmt.Sprintf("status:%d:processing", order.ID)),
            tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", fmt.Sprintf("status:%d:cancelled", order.ID)),
        ),
    )
    msg.ReplyMarkup = markup

    if _, err := b.bot.Send(msg); err != nil {
        b.logger.Error("Failed to send admin notification",
            zap.Int64("order_id", order.ID),
            zap.Error(err))
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel —Ñ–∞–π–ª
    doc := tgbotapi.NewDocument(chatID, tgbotapi.FilePath(filepath))
    if _, err := b.bot.Send(doc); err != nil {
        b.logger.Error("Failed to send order document",
            zap.Int64("chat_id", chatID),
            zap.Error(err))
    }
    doc.Caption = fmt.Sprintf("üìä –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #%d", order.ID)
    
    if _, err := b.bot.Send(doc); err != nil {
        b.logger.Error("Failed to send Excel file to admin",
            zap.Int64("order_id", order.ID),
            zap.Error(err))
    }
}
