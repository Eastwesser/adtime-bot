package bot

import (
	"adtime-bot/internal/storage"
	"context"
	"fmt"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"go.uber.org/zap"
)

func (b *Bot) handleCommand(ctx context.Context, chatID int64, command string) {
	switch command {
	case "start":
		b.handleStart(ctx, chatID)
	case "help":
		b.handleHelp(ctx, chatID)
	default:
		b.handleUnknownCommand(ctx, chatID)
	}
}

func (b *Bot) handleDefault(ctx context.Context, chatID int64) {
	b.sendError(chatID, "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.")
}

func (b *Bot) handleUnknownCommand(ctx context.Context, chatID int64) {
	b.sendError(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
}

func (b *Bot) handleHelp(ctx context.Context, chatID int64) {
	helpText := `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
	/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
	/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

	–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.`
	b.sendMessage(tgbotapi.NewMessage(chatID, helpText))
}

func (b *Bot) handleStart(ctx context.Context, chatID int64) {
	text := `–ü—Ä–∏–≤–µ—Ç! üëã

	‚ö†Ô∏è –ü—Ä–µ–∂–¥–µ —á–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.
	–ò—Å–ø–æ–ª—å–∑—É—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

	–ï—Å–ª–∏ –≤—Å—ë –æ–∫ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá`

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"),
		),
	)

	b.sendMessage(msg)
	if err := b.state.SetStep(ctx, chatID, StepPrivacyAgreement); err != nil {
		b.logger.Error("Failed to set privacy agreement state",
			zap.Int64("chat_id", chatID),
			zap.Error(err))
	}
}

func (b *Bot) handlePrivacyAgreement(ctx context.Context, chatID int64, text string) {
	if text != "‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" {
		b.sendError(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å\" —á—Ç–æ–±—ã —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏")
		return
	}

	msg := tgbotapi.NewMessage(chatID, "–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–≥–ª–∞—Å–∏–µ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.")
	msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"),
		),
	)

	b.sendMessage(msg)
	if err := b.state.SetStep(ctx, chatID, StepServiceSelection); err != nil {
		b.logger.Error("Failed to set service selection state",
			zap.Int64("chat_id", chatID),
			zap.Error(err))
	}
}

func (b *Bot) handleServiceSelection(ctx context.Context, chatID int64, text string) {
	if text != "‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑" {
		b.sendError(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑\" —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
		return
	}

	msg := tgbotapi.NewMessage(chatID, "–ö–∞–∫—É—é —É—Å–ª—É–≥—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å?")
	b.sendMessage(msg)
	if err := b.state.SetStep(ctx, chatID, StepServiceInput); err != nil {
		b.logger.Error("Failed to set service input state",
			zap.Int64("chat_id", chatID),
			zap.Error(err))
	}
}

func (b *Bot) handleServiceInput(ctx context.Context, chatID int64, text string) {
	if err := b.state.SetService(ctx, chatID, text); err != nil {
		b.logger.Error("Failed to set service",
			zap.Int64("chat_id", chatID),
			zap.Error(err))
		b.sendError(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏")
		return
	}

	msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É –∏ –¥–ª–∏–Ω—É –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 30 40)\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 80x50 —Å–º")
	b.sendMessage(msg)
	if err := b.state.SetStep(ctx, chatID, StepDimensions); err != nil {
		b.logger.Error("Failed to set dimensions state",
			zap.Int64("chat_id", chatID),
			zap.Error(err))
	}
}

func (b *Bot) handleDimensionsSize(ctx context.Context, chatID int64, text string) {
	parts := strings.Split(text, " ")
	if len(parts) != 2 {
		b.sendError(chatID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É –∏ –¥–ª–∏–Ω—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
		return
	}

	width, err := strconv.Atoi(parts[0])
	if err != nil || width <= 0 || width > 80 {
		b.sendError(chatID, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —à–∏—Ä–∏–Ω–∞. –î–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: 1-80 —Å–º")
		return
	}

	height, err := strconv.Atoi(parts[1])
	if err != nil || height <= 0 || height > 50 {
		b.sendError(chatID, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏–Ω–∞. –î–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: 1-50 —Å–º")
		return
	}

	if err := b.state.SetDimensions(ctx, chatID, width, height); err != nil {
		b.logger.Error("Failed to set dimensions",
			zap.Int64("chat_id", chatID),
			zap.Error(err))
		b.sendError(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤")
		return
	}

	b.showTextures(ctx, chatID)
}

func (b *Bot) handleTextureSelection(ctx context.Context, callback *tgbotapi.CallbackQuery) {
    chatID := callback.Message.Chat.ID
    
    // Parse texture ID from callback data
    parts := strings.Split(callback.Data, ":")
    if len(parts) != 2 {
        b.sendError(chatID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç—É—Ä—ã")
        return
    }
    textureID := parts[1]

    // Get dimensions from state
    width, height, err := b.state.GetDimensions(ctx, chatID)
    if err != nil {
        b.logger.Error("Failed to get dimensions",
            zap.Int64("chat_id", chatID),
            zap.Error(err))
        b.sendError(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤")
        return
    }

    // Get texture price from API
    texturePrice, err := b.api.GetTexturePrice(ctx, textureID)
    if err != nil {
        b.logger.Error("Failed to get texture price",
            zap.String("texture_id", textureID),
            zap.Error(err))
        b.sendError(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É —Ç–µ–∫—Å—Ç—É—Ä—ã")
        return
    }

    // Calculate total price
    price := CalculatePrice(width, height, texturePrice)

    // Save texture selection to state
    if err := b.state.SetTexture(ctx, chatID, textureID, price); err != nil {
        b.logger.Error("Failed to set texture",
            zap.Int64("chat_id", chatID),
            zap.Error(err))
        b.sendError(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç—É—Ä—ã")
        return
    }

    // Send confirmation message with price
    msg := tgbotapi.NewMessage(chatID, fmt.Sprintf(
        "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ–∫—Å—Ç—É—Ä—É. –ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: %.2f —Ä—É–±\n\n–ö–æ–≥–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–∫–∞–∑?",
        price,
    ))
    msg.ReplyMarkup = b.CreateDateSelectionKeyboard()
    b.sendMessage(msg)

    // Update user step
    if err := b.state.SetStep(ctx, chatID, StepDateSelection); err != nil {
        b.logger.Error("Failed to set waiting state",
            zap.Int64("chat_id", chatID),
            zap.Error(err))
    }

    // Delete the original message with texture options
    delMsg := tgbotapi.NewDeleteMessage(chatID, callback.Message.MessageID)
    if _, err := b.bot.Send(delMsg); err != nil {
        b.logger.Warn("Failed to delete message",
            zap.Int("message_id", callback.Message.MessageID),
            zap.Error(err))
    }
}

func (b *Bot) handleDateSelection(ctx context.Context, chatID int64, text string) {
	switch text {
	case "–°–µ–≥–æ–¥–Ω—è":
		today := time.Now().Format("02.01.2006")
		if err := b.state.SetDate(ctx, chatID, today); err != nil {
			b.logger.Error("Failed to set today as date",
				zap.Int64("chat_id", chatID),
				zap.Error(err))
			b.sendError(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–∞—Ç—ã")
			return
		}
		b.confirmDateSelection(ctx, chatID, today)
	case "–ó–∞–≤—Ç—Ä–∞":
		tomorrow := time.Now().Add(24 * time.Hour).Format("02.01.2006")
		if err := b.state.SetDate(ctx, chatID, tomorrow); err != nil {
			b.logger.Error("Failed to set tomorrow as date",
				zap.Int64("chat_id", chatID),
				zap.Error(err))
			b.sendError(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–∞—Ç—ã")
			return
		}
		b.confirmDateSelection(ctx, chatID, tomorrow)
	case "–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é":
		msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
		b.sendMessage(msg)
		if err := b.state.SetStep(ctx, chatID, StepManualDateInput); err != nil {
			b.logger.Error("Failed to set manual date input state",
				zap.Int64("chat_id", chatID),
				zap.Error(err))
		}
	default:
		b.sendError(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
	}
}

func (b *Bot) handleManualDateInput(ctx context.Context, chatID int64, text string) {
	_, err := time.Parse("02.01.2006", text)
	if err != nil {
		b.sendError(chatID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
		return
	}

	inputDate, _ := time.Parse("02.01.2006", text)
	if inputDate.Before(time.Now().Truncate(24 * time.Hour)) {
		b.sendError(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤ –±—É–¥—É—â–µ–º")
		return
	}

	if err := b.state.SetDate(ctx, chatID, text); err != nil {
		b.logger.Error("Failed to set manual date",
			zap.Int64("chat_id", chatID),
			zap.Error(err))
		b.sendError(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞—Ç—ã")
		return
	}

	b.confirmDateSelection(ctx, chatID, text)
}

func (b *Bot) confirmDateSelection(ctx context.Context, chatID int64, date string) {
	days := b.calculateWorkingDays(date)

	text := fmt.Sprintf("–û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: %s\n–î–æ —ç—Ç–æ–π –¥–∞—Ç—ã %d —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π (–±–µ–∑ —É—á—ë—Ç–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö –∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤).", date, days)

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üîÅ –°–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É"),
			tgbotapi.NewKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–∞—Ç—É"),
		),
	)
	b.sendMessage(msg)
	if err := b.state.SetStep(ctx, chatID, StepDateConfirmation); err != nil {
		b.logger.Error("Failed to set date confirmation state",
			zap.Int64("chat_id", chatID),
			zap.Error(err))
	}
}

func (b *Bot) calculateWorkingDays(date string) int {
	targetDate, _ := time.Parse("02.01.2006", date)
	now := time.Now()

	days := 0
	for d := now; d.Before(targetDate); d = d.AddDate(0, 0, 1) {
		if d.Weekday() != time.Saturday && d.Weekday() != time.Sunday {
			days++
		}
	}
	return days
}

func (b *Bot) handleDateConfirmation(ctx context.Context, chatID int64, text string) {
	if text != "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–∞—Ç—É" {
		b.sendError(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
		return
	}

	msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:")
	b.sendMessage(msg)
	if err := b.state.SetStep(ctx, chatID, StepPhoneNumber); err != nil {
		b.logger.Error("Failed to set phone number state",
			zap.Int64("chat_id", chatID),
			zap.Error(err))
	}
}

func (b *Bot) handlePhoneNumber(ctx context.Context, chatID int64, text string) {
    // Validate phone number format
    if !IsValidPhoneNumber(text) {
        b.sendError(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79161234567)")
        return
    }

    // Get order details from state
    _, err := b.state.GetFullState(ctx, chatID)
    if err != nil {
        b.logger.Error("Failed to get order state",
            zap.Int64("chat_id", chatID),
            zap.Error(err))
        b.sendError(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞")
        return
    }

    // Get dimensions
    width, height, err := b.state.GetDimensions(ctx, chatID)
    if err != nil {
        b.logger.Error("Failed to get dimensions",
            zap.Int64("chat_id", chatID),
            zap.Error(err))
        b.sendError(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤")
        return
    }

    // Get selected texture
    textureID, err := b.state.GetTextureID(ctx, chatID)
    if err != nil {
        b.logger.Error("Failed to get texture ID from state",
            zap.Int64("chat_id", chatID),
            zap.Error(err))
        b.sendError(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç—É—Ä—ã")
        return
    }

    texture, err := b.storage.GetTextureByID(ctx, textureID)
    if err != nil {
        b.logger.Error("Failed to get texture",
            zap.String("texture_id", textureID),
            zap.Error(err))
        b.sendError(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç—É—Ä—ã")
        return
    }

    // Calculate price and create order
    price := CalculatePrice(width, height, texture.PricePerDM2)
    order := storage.Order{
        UserID:      chatID,
        WidthCM:     width,
        HeightCM:    height,
        TextureID:   texture.ID,
        TextureName: texture.Name,
        PricePerDM2: texture.PricePerDM2,
        TotalPrice:  price,
        Contact:     text,
        Status:      "new",
        CreatedAt:   time.Now(),
    }

    // Save order to database
    orderID, err := b.storage.SaveOrder(ctx, order)
    if err != nil {
        b.logger.Error("Failed to save order",
            zap.Int64("chat_id", chatID),
            zap.Error(err))
        b.sendError(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")
        return
    }
    order.ID = orderID

    // Send confirmation to user
    b.sendMessage(tgbotapi.NewMessage(chatID,
        "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."))

    // Notify admin
    adminMsg := FormatOrderNotification(order)
    b.sendAdminNotification(ctx, adminMsg)

    // Export to Excel (with error handling)
    if err := b.storage.ExportOrderToExcel(ctx, order); err != nil {
        b.logger.Error("Failed to export order to Excel",
            zap.Int64("chat_id", chatID),
            zap.Error(err))
        b.sendAdminNotification(ctx, 
            fmt.Sprintf("‚ö†Ô∏è Failed to export order #%d to Excel: %v", order.ID, err))
    }

    // Clear user state
    if err := b.state.ClearState(ctx, chatID); err != nil {
        b.logger.Error("Failed to clear user state",
            zap.Int64("chat_id", chatID),
            zap.Error(err))
    }
}

func (b *Bot) showTextures(ctx context.Context, chatID int64) {
    width, height, err := b.state.GetDimensions(ctx, chatID)
    if err != nil {
        b.logger.Error("Failed to get dimensions",
            zap.Int64("chat_id", chatID),
            zap.Error(err))
        b.sendError(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤")
        return
    }

    // Validate max dimensions
    if width > 80 || height > 50 {
        b.sendError(chatID, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 80x50 —Å–º")
        return
    }

    textures, err := b.storage.GetAvailableTextures(ctx)
    if err != nil {
        b.logger.Error("Failed to get textures",
            zap.Int64("chat_id", chatID),
            zap.Error(err))
        b.sendError(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–µ–∫—Å—Ç—É—Ä—ã")
        return
    }

    var buttons []tgbotapi.InlineKeyboardButton
    for _, texture := range textures {
        price := CalculatePrice(width, height, texture.PricePerDM2)
        btn := tgbotapi.NewInlineKeyboardButtonData(
            fmt.Sprintf("%s - %.2f —Ä—É–± (%.2f‚ÇΩ/–¥–º¬≤)", texture.Name, price, texture.PricePerDM2),
            fmt.Sprintf("texture:%s", texture.ID),
        )
        buttons = append(buttons, btn)
    }

    if len(buttons) == 0 {
        b.sendError(chatID, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–∫—Å—Ç—É—Ä")
        return
    }

    // Send texture image if available
    if textures[0].ImageURL != "" {
        photo := tgbotapi.NewPhoto(chatID, tgbotapi.FileURL(textures[0].ImageURL))
        photo.Caption = "–û–±—Ä–∞–∑—Ü—ã –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–∫—Å—Ç—É—Ä:"
        if _, err := b.bot.Send(photo); err != nil {
            b.logger.Error("Failed to send photo",
                zap.Int64("chat_id", chatID),
                zap.Error(err))
        }
    }

    msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç—É—Ä—É:")
    msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
        tgbotapi.NewInlineKeyboardRow(buttons...),
    )
    b.sendMessage(msg)
}
