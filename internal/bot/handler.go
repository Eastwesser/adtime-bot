package bot

import (
	"adtime-bot/internal/storage"
	"context"
	"fmt"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"go.uber.org/zap"
)

// MESSAGE HANDLERS

func (b *Bot) handleMessage(ctx context.Context, msg *tgbotapi.Message) {
	chatID := msg.Chat.ID

	switch {
	case msg.IsCommand():
		b.handleCommand(ctx, chatID, msg.Command())
	case b.state.IsWaitingForPrivacyAgreement(chatID):
		b.handlePrivacyAgreement(ctx, chatID, msg.Text)
	case b.state.IsWaitingForServiceSelection(chatID):
		b.handleServiceSelection(ctx, chatID, msg.Text)
	case b.state.IsWaitingForDateSelection(chatID):
		b.handleDateSelection(ctx, chatID, msg.Text)
	case b.state.IsWaitingForPhoneNumber(chatID):
		b.handlePhoneNumber(ctx, chatID, msg.Text)
	default:
		b.handleDefault(ctx, chatID)
	}
}

func (b *Bot) handleDefault(ctx context.Context, chatID int64) {
	panic("unimplemented")
}

func (b *Bot) handleCommand(ctx context.Context, chatID int64, command string) {
	switch command {
	case "start":
		b.handleStart(ctx, chatID)
	default:
		b.handleUnknownCommand(ctx, chatID)
	}
}

func (b *Bot) handleUnknownCommand(ctx context.Context, chatID int64) {
	panic("unimplemented")
}

func (b *Bot) handleStart(ctx context.Context, chatID int64) {
	text := "–ü—Ä–∏–≤–µ—Ç! üëã\n\n‚ö†Ô∏è –ü—Ä–µ–∂–¥–µ —á–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.\n" +
		"–ò—Å–ø–æ–ª—å–∑—É—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n\n" +
		"–ï—Å–ª–∏ –≤—Å—ë –æ–∫ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá"

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"),
		),
	)

	b.sendMessage(msg)
	b.state.SetWaitingForPrivacyAgreement(chatID)
}

func (b *Bot) handlePrivacyAgreement(ctx context.Context, chatID int64, text string) {
	if text != "‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" {
		b.sendError(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å\" —á—Ç–æ–±—ã —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏")
		return
	}

	msg := tgbotapi.NewMessage(chatID, "–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–≥–ª–∞—Å–∏–µ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.")
	msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"),
		),
	)

	b.sendMessage(msg)
	b.state.SetWaitingForServiceSelection(chatID)
}

func (b *Bot) handleServiceSelection(ctx context.Context, chatID int64, text string) {
	if text != "‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑" {
		b.sendError(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑\" —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
		return
	}

	msg := tgbotapi.NewMessage(chatID, "–ö–∞–∫—É—é —É—Å–ª—É–≥—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å?")
	b.sendMessage(msg)
	b.state.SetWaitingForServiceInput(chatID)
}

func (b *Bot) handleServiceInputSizeCheck(ctx context.Context, chatID int64, text string) {
	// –£—Å—Ç–∞–Ω–æ–≤–∏–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —É—Å–ª—É–≥—É
	b.state.SetService(chatID, text)

	// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
	msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É –∏ –¥–ª–∏–Ω—É –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 30 40)\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 80x50 —Å–º")
	b.sendMessage(msg)
	b.state.SetWaitingDimensions(chatID)
}

func (b *Bot) handleDimensionsSize(ctx context.Context, chatID int64, text string) {
	parts := strings.Split(text, " ")
	if len(parts) != 2 {
		b.sendError(chatID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É –∏ –¥–ª–∏–Ω—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
		return
	}

	width, err := strconv.Atoi(parts[0])
	if err != nil || width <= 0 || width > 80 {
		b.sendError(chatID, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —à–∏—Ä–∏–Ω–∞. –î–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: 1-80 —Å–º")
		return
	}

	height, err := strconv.Atoi(parts[1])
	if err != nil || height <= 0 || height > 50 {
		b.sendError(chatID, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏–Ω–∞. –î–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: 1-50 —Å–º")
		return
	}

	// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π context
	if err := b.state.SetDimensions(ctx, chatID, width, height); err != nil {
		b.logger.Error("Failed to set dimensions", zap.Error(err))
		b.sendError(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤")
		return
	}

	b.showTextures(ctx, chatID)
}

func (b *Bot) showTextures(ctx context.Context, chatID int64) {
	textures, err := b.api.GetTextures(ctx)
	if err != nil {
		b.logger.Error("Failed to get textures", zap.Error(err))
		b.sendError(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–µ–∫—Å—Ç—É—Ä—ã")
		return
	}

	width, height := b.state.GetDimensions(chatID)
	var buttons []tgbotapi.InlineKeyboardButton

	for _, texture := range textures {
		if !texture.InStock {
			continue
		}

		price := calculatePrice(width, height, texture.PricePerDM2)
		btn := tgbotapi.NewInlineKeyboardButtonData(
			fmt.Sprintf("%s - %.2f —Ä—É–±", texture.Name, price),
			fmt.Sprintf("texture:%s", texture.ID),
		)
		buttons = append(buttons, btn)
	}

	if len(buttons) == 0 {
		b.sendError(chatID, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–∫—Å—Ç—É—Ä")
		return
	}

	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç—É—Ä—É:")
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(buttons...),
	)
	b.sendMessage(msg)
}

func calculatePrice(widthCm, heightCm int, pricePerDM2 float64) float64 {
	widthDM := float64(widthCm) / 10
	heightDM := float64(heightCm) / 10
	return widthDM * heightDM * pricePerDM2
}

func (b *Bot) handleServiceInput(ctx context.Context, chatID int64, text string) {
	// –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥
	b.state.SetService(chatID, text)

	msg := tgbotapi.NewMessage(chatID, "–ö–æ–≥–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–∫–∞–∑?")
	msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–°–µ–≥–æ–¥–Ω—è"),
			tgbotapi.NewKeyboardButton("–ó–∞–≤—Ç—Ä–∞"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é"),
		),
	)
	b.sendMessage(msg)
	b.state.SetWaitingForDateSelection(chatID)
}

func (b *Bot) handleDateSelection(ctx context.Context, chatID int64, text string) {
	switch text {
	case "–°–µ–≥–æ–¥–Ω—è":
		today := time.Now().Format("02.01.2006")
		b.state.SetDate(chatID, today)
		b.confirmDateSelection(ctx, chatID, today)
	case "–ó–∞–≤—Ç—Ä–∞":
		tomorrow := time.Now().Add(24 * time.Hour).Format("02.01.2006")
		b.state.SetDate(chatID, tomorrow)
		b.confirmDateSelection(ctx, chatID, tomorrow)
	case "–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é":
		msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
		b.sendMessage(msg)
		b.state.SetWaitingForManualDateInput(chatID)
	case "üîÅ –°–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É":
		msg := tgbotapi.NewMessage(chatID, "–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ –≤—ã–±–µ—Ä–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É")
		msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
			tgbotapi.NewKeyboardButtonRow(
				tgbotapi.NewKeyboardButton("–°–µ–≥–æ–¥–Ω—è"),
				tgbotapi.NewKeyboardButton("–ó–∞–≤—Ç—Ä–∞"),
			),
			tgbotapi.NewKeyboardButtonRow(
				tgbotapi.NewKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é"),
			),
		)
		b.sendMessage(msg)
		b.state.SetWaitingForDateSelection(chatID)
	case "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–∞—Ç—É":
		b.handleDateConfirmation(ctx, chatID)
	default:
		if b.state.IsWaitingForManualDateInput(chatID) {
			b.handleManualDateInput(ctx, chatID, text)
		} else {
			b.sendError(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
		}
	}
}

func (b *Bot) handleManualDateInput(ctx context.Context, chatID int64, text string) {
	_, err := time.Parse("02.01.2006", text)
	if err != nil {
		msg := tgbotapi.NewMessage(chatID, "üïí –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–∞—Ç—É –≤ –±—É–¥—É—â–µ–º ‚è≥")
		b.sendMessage(msg)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º
	inputDate, _ := time.Parse("02.01.2006", text)
	if inputDate.Before(time.Now().Truncate(24 * time.Hour)) {
		msg := tgbotapi.NewMessage(chatID, "üïí –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–∞—Ç—É –≤ –±—É–¥—É—â–µ–º ‚è≥")
		b.sendMessage(msg)
		return
	}

	b.state.SetDate(chatID, text)
	b.confirmDateSelection(ctx, chatID, text)
}

func (b *Bot) confirmDateSelection(ctx context.Context, chatID int64, date string) {
	days := b.calculateWorkingDays(date)

	text := fmt.Sprintf("–û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: %s\n–î–æ —ç—Ç–æ–π –¥–∞—Ç—ã %d —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π (–±–µ–∑ —É—á—ë—Ç–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö –∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤).", date, days)

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üîÅ –°–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É"),
			tgbotapi.NewKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–∞—Ç—É"),
		),
	)
	b.sendMessage(msg)
	b.state.SetWaitingForDateConfirmation(chatID)
}

func (b *Bot) calculateWorkingDays(date string) int {
	// –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤
	targetDate, _ := time.Parse("02.01.2006", date)
	now := time.Now()

	days := 0
	for d := now; d.Before(targetDate); d = d.AddDate(0, 0, 1) {
		if d.Weekday() != time.Saturday && d.Weekday() != time.Sunday {
			days++
		}
	}
	return days
}

func (b *Bot) handleDateConfirmation(ctx context.Context, chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
	b.sendMessage(msg)
	b.state.SetWaitingForPhoneNumber(chatID)
}

func (b *Bot) handlePhoneNumber(ctx context.Context, chatID int64, text string) {
	if !isValidPhoneNumber(text) {
		msg := tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79161234567)")
		b.sendMessage(msg)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
	state, err := b.state.Get(ctx, chatID)
	if err != nil {
		b.logger.Error("Failed to get order state", zap.Error(err))
		b.sendError(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞")
		return
	}

	price, _ := strconv.ParseFloat(state.Price, 64)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ PostgreSQL
	order := storage.Order{
		UserID:    chatID,
		WidthCM:   state.WidthCM,
		HeightCM:  state.HeightCM,
		TextureID: state.TextureID,
		Price:     price,
		Contact:   text,
	}

	if err := b.storage.SaveOrder(ctx, order); err != nil {
		b.logger.Error("Failed to save order to database", zap.Error(err))
		b.sendError(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º Excel-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
	excelData := fmt.Sprintf(
		"SKU\t–®–∏—Ä–∏–Ω–∞ (—Å–º)\t–î–ª–∏–Ω–∞ (—Å–º)\t–ü–ª–æ—â–∞–¥—å (—Å–º¬≤)\t–¶–ï–ù–ê –î–õ–Ø –ö–õ (‚ÇΩ)\n"+
			"%s\t%d\t%d\t%d\t%.2f",
		state.TextureID,
		state.WidthCM,
		state.HeightCM,
		state.WidthCM*state.HeightCM,
		price,
	)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	adminMsg := tgbotapi.NewMessage(chatID, "–ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n```\n"+excelData+"\n```")
	adminMsg.ParseMode = "Markdown"
	b.bot.Send(adminMsg)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	msg := tgbotapi.NewMessage(chatID, "–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")
	b.sendMessage(msg)
	b.state.ClearState(chatID)
}

func isValidPhoneNumber(phone string) bool {
	if len(phone) < 10 {
		return false
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å + –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –ø–æ—Å–ª–µ +
	if !strings.HasPrefix(phone, "+") {
		return false
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ + —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
	for _, c := range phone[1:] {
		if c < '0' || c > '9' {
			return false
		}
	}
	
	return true
}
