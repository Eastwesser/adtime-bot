package bot

import (
	"adtime-bot/internal/storage"
	"context"
	"fmt"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"go.uber.org/zap"
)

func (b *Bot) handleStart(ctx context.Context, chatID int64) {
	text := `–ü—Ä–∏–≤–µ—Ç! üëã

‚ö†Ô∏è –ü—Ä–µ–∂–¥–µ —á–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.
–ò—Å–ø–æ–ª—å–∑—É—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

–ï—Å–ª–∏ –≤—Å—ë –æ–∫ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá`

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = b.CreatePrivacyAgreementKeyboard()
	b.sendMessage(msg)
	
	if err := b.state.SetStep(ctx, chatID, StepPrivacyAgreement); err != nil {
		b.logger.Error("Failed to set privacy agreement state",
			zap.Int64("chat_id", chatID),
			zap.Error(err))
	}
}

func (b *Bot) handleCommand(ctx context.Context, chatID int64, command string) {
	switch command {
	case "start":
		b.handleStart(ctx, chatID)
	case "help":
		b.handleHelp(ctx, chatID)
	default:
		b.handleUnknownCommand(ctx, chatID)
	}
}

func (b *Bot) handleDefault(ctx context.Context, chatID int64) {
	b.sendError(chatID, "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.")
}

func (b *Bot) handleUnknownCommand(ctx context.Context, chatID int64) {
	b.sendError(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
}

func (b *Bot) handleHelp(ctx context.Context, chatID int64) {
	helpText := `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.`
	
	msg := tgbotapi.NewMessage(chatID, helpText)
	b.sendMessage(msg)
}

func (b *Bot) handlePrivacyAgreement(ctx context.Context, chatID int64, text string) {
	if text != "‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" {
		b.sendError(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å\" —á—Ç–æ–±—ã —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏")
		return
	}

	msg := tgbotapi.NewMessage(chatID, "–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–≥–ª–∞—Å–∏–µ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.")
	msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"),
		),
	)

	b.sendMessage(msg)
	if err := b.state.SetStep(ctx, chatID, StepServiceSelection); err != nil {
		b.logger.Error("Failed to set service selection state",
			zap.Int64("chat_id", chatID),
			zap.Error(err))
	}
}

func (b *Bot) handleServiceSelection(ctx context.Context, chatID int64, text string) {
	if text != "‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑" {
		b.sendError(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑\" —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
		return
	}

	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å–ª—É–≥–∏:")
	msg.ReplyMarkup = b.CreateServiceTypeKeyboard()
	b.sendMessage(msg)
	
	if err := b.state.SetStep(ctx, chatID, StepServiceType); err != nil {
		b.logger.Error("Failed to set service type state",
			zap.Int64("chat_id", chatID),
			zap.Error(err))
	}
}

func (b *Bot) handleServiceType(ctx context.Context, chatID int64, text string) {
	validServices := map[string]bool{
		"–ü–µ—á–∞—Ç—å –Ω–∞–∫–ª–µ–µ–∫": true,
		"–î—Ä—É–≥–∞—è —É—Å–ª—É–≥–∞":  true,
	}
	
	if !validServices[text] {
		b.sendError(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
		return
	}

	if err := b.state.SetService(ctx, chatID, text); err != nil {
		b.logger.Error("Failed to set service",
			zap.Int64("chat_id", chatID),
			zap.Error(err))
		b.sendError(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏")
		return
	}

	msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É –∏ –¥–ª–∏–Ω—É –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 30 40)\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 80x50 —Å–º")
	b.sendMessage(msg)
	
	if err := b.state.SetStep(ctx, chatID, StepDimensions); err != nil {
		b.logger.Error("Failed to set dimensions state",
			zap.Int64("chat_id", chatID),
			zap.Error(err))
	}
}

func (b *Bot) handleDimensionsSize(ctx context.Context, chatID int64, text string) {
	parts := strings.Split(text, " ")
	if len(parts) != 2 {
		b.sendError(chatID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É –∏ –¥–ª–∏–Ω—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
		return
	}

	width, err := strconv.Atoi(parts[0])
	if err != nil || width <= 0 || width > 80 {
		b.sendError(chatID, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —à–∏—Ä–∏–Ω–∞. –î–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: 1-80 —Å–º")
		return
	}

	height, err := strconv.Atoi(parts[1])
	if err != nil || height <= 0 || height > 50 {
		b.sendError(chatID, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏–Ω–∞. –î–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: 1-50 —Å–º")
		return
	}

	if err := b.state.SetDimensions(ctx, chatID, width, height); err != nil {
		b.logger.Error("Failed to set dimensions",
			zap.Int64("chat_id", chatID),
			zap.Error(err))
		b.sendError(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤")
		return
	}

	msg := tgbotapi.NewMessage(chatID, "–ö–æ–≥–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–∫–∞–∑?")
	msg.ReplyMarkup = b.CreateDateSelectionKeyboard()
	b.sendMessage(msg)
	
	if err := b.state.SetStep(ctx, chatID, StepDateSelection); err != nil {
		b.logger.Error("Failed to set date selection state",
			zap.Int64("chat_id", chatID),
			zap.Error(err))
	}
}

func (b *Bot) handleDateSelection(ctx context.Context, chatID int64, text string) {
	var selectedDate string
	
	switch text {
	case "–°–µ–≥–æ–¥–Ω—è":
		selectedDate = time.Now().Format("02.01.2006")
	case "–ó–∞–≤—Ç—Ä–∞":
		selectedDate = time.Now().Add(24 * time.Hour).Format("02.01.2006")
	case "–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é":
		msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
		b.sendMessage(msg)
		if err := b.state.SetStep(ctx, chatID, StepManualDateInput); err != nil {
			b.logger.Error("Failed to set manual date input state",
				zap.Int64("chat_id", chatID),
				zap.Error(err))
		}
		return
	default:
		b.sendError(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
		return
	}

	if err := b.state.SetDate(ctx, chatID, selectedDate); err != nil {
		b.logger.Error("Failed to set date",
			zap.Int64("chat_id", chatID),
			zap.Error(err))
		b.sendError(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–∞—Ç—ã")
		return
	}

	b.confirmDateSelection(ctx, chatID, selectedDate)
}

func (b *Bot) handleManualDateInput(ctx context.Context, chatID int64, text string) {
	_, err := time.Parse("02.01.2006", text)
	if err != nil {
		b.sendError(chatID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
		return
	}

	inputDate, _ := time.Parse("02.01.2006", text)
	if inputDate.Before(time.Now().Truncate(24 * time.Hour)) {
		b.sendError(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤ –±—É–¥—É—â–µ–º")
		return
	}

	if err := b.state.SetDate(ctx, chatID, text); err != nil {
		b.logger.Error("Failed to set manual date",
			zap.Int64("chat_id", chatID),
			zap.Error(err))
		b.sendError(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞—Ç—ã")
		return
	}

	b.confirmDateSelection(ctx, chatID, text)
}

func (b *Bot) confirmDateSelection(ctx context.Context, chatID int64, date string) {
	days := b.calculateWorkingDays(date)

	text := fmt.Sprintf("–û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: %s\n–î–æ —ç—Ç–æ–π –¥–∞—Ç—ã %d —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π (–±–µ–∑ —É—á—ë—Ç–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö –∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤).", date, days)

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üîÅ –°–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É"),
			tgbotapi.NewKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–∞—Ç—É"),
		),
	)
	b.sendMessage(msg)
	if err := b.state.SetStep(ctx, chatID, StepDateConfirmation); err != nil {
		b.logger.Error("Failed to set date confirmation state",
			zap.Int64("chat_id", chatID),
			zap.Error(err))
	}
}

func (b *Bot) calculateWorkingDays(date string) int {
	targetDate, _ := time.Parse("02.01.2006", date)
	now := time.Now()

	days := 0
	for d := now; d.Before(targetDate); d = d.AddDate(0, 0, 1) {
		if d.Weekday() != time.Saturday && d.Weekday() != time.Sunday {
			days++
		}
	}
	return days
}

func (b *Bot) handleDateConfirmation(ctx context.Context, chatID int64, text string) {
	if text != "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–∞—Ç—É" {
		b.sendError(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
		return
	}

	msg := tgbotapi.NewMessage(chatID, "–ö–∞–∫ –≤–∞–º —É–¥–æ–±–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ?")
	msg.ReplyMarkup = b.CreatePhoneInputKeyboard()
	b.sendMessage(msg)
	
	if err := b.state.SetStep(ctx, chatID, StepContactMethod); err != nil {
		b.logger.Error("Failed to set contact method state",
			zap.Int64("chat_id", chatID),
			zap.Error(err))
	}
}

func (b *Bot) handleContactMethod(ctx context.Context, chatID int64, text string) {
	if text == "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é" {
		msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79123456789 –∏–ª–∏ 89123456789:")
		b.sendMessage(msg)
		
		if err := b.state.SetStep(ctx, chatID, StepPhoneNumber); err != nil {
			b.logger.Error("Failed to set phone number state",
				zap.Int64("chat_id", chatID),
				zap.Error(err))
		}
	}
}

func (b *Bot) handlePhoneNumber(ctx context.Context, chatID int64, text string) {
    normalized := NormalizePhoneNumber(text)
    
    if !IsValidPhoneNumber(normalized) {
        b.sendError(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79161234567 –∏–ª–∏ 89123456789)")
        return
    }

    b.logger.Debug("Phone number validation",
        zap.String("input", text),
        zap.String("normalized", normalized),
        zap.Bool("is_valid", IsValidPhoneNumber(normalized)))

    // Create and save the order
    orderID, err := b.createOrder(ctx, chatID, normalized)
    if err != nil {
        b.logger.Error("Failed to create order",
            zap.Int64("chat_id", chatID),
            zap.Error(err))
        b.sendError(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")
        return
    }

    // Clear user state
    if err := b.state.ClearState(ctx, chatID); err != nil {
        b.logger.Error("Failed to clear user state",
            zap.Int64("chat_id", chatID),
            zap.Error(err))
    }

    // Send final confirmation
    b.sendMessage(tgbotapi.NewMessage(chatID,
        "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #"+strconv.FormatInt(orderID, 10)))
}

func (b *Bot) createOrder(ctx context.Context, chatID int64, phone string) (int64, error) {
    state, err := b.state.GetFullState(ctx, chatID)
    if err != nil {
        return 0, fmt.Errorf("failed to get order state: %w", err)
    }

    width, height, err := b.state.GetDimensions(ctx, chatID)
    if err != nil {
        return 0, fmt.Errorf("failed to get dimensions: %w", err)
    }

    // Get or set default texture
    var texture *storage.Texture
    if state.TextureID != "" {
        texture, err = b.storage.GetTextureByID(ctx, state.TextureID)
        if err != nil {
            return 0, fmt.Errorf("failed to get texture: %w", err)
        }
    } else {
        texture = &storage.Texture{
            ID:          "11111111-1111-1111-1111-111111111111",
            Name:        "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞",
            PricePerDM2: 10.0,
        }
    }

    // Create pricing config from bot's configuration
    pricingConfig := PricingConfig{
        LeatherPricePerDM2:    b.cfg.Pricing.LeatherPricePerDM2,
        ProcessingCostPerDM2:  b.cfg.Pricing.ProcessingCostPerDM2,
        PaymentCommissionRate: b.cfg.Pricing.PaymentCommissionRate,
        SalesTaxRate:          b.cfg.Pricing.SalesTaxRate,
        MarkupMultiplier:      b.cfg.Pricing.MarkupMultiplier,
    }

    // Calculate pricing
    priceDetails := CalculatePrice(width, height, pricingConfig)

    order := storage.Order{
        UserID:      chatID,
        WidthCM:     width,
        HeightCM:    height,
        TextureID:   texture.ID,
        TextureName: texture.Name,
        Price:       priceDetails["final_price"],
        LeatherCost: priceDetails["leather_cost"],
        ProcessCost: priceDetails["processing_cost"],
        TotalCost:   priceDetails["total_cost"],
        Commission:  priceDetails["commission"],
        Tax:         priceDetails["tax"],
        NetRevenue:  priceDetails["net_revenue"],
        Profit:      priceDetails["profit"],
        Contact:     phone,
        Status:      "new",
        CreatedAt:   time.Now(),
    }

    // Save to database
    orderID, err := b.storage.SaveOrder(ctx, order)
    if err != nil {
        return 0, fmt.Errorf("failed to save order: %w", err)
    }

    // Export to Excel
    if err := b.storage.ExportOrderToExcel(ctx, order); err != nil {
        b.logger.Error("Failed to export order to Excel",
            zap.Int64("order_id", orderID),
            zap.Error(err))
    }

    // Send order details
    msgText := fmt.Sprintf(
        "‚úÖ –ó–∞–∫–∞–∑ #%d –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n%s\n\n–ö–æ–Ω—Ç–∞–∫—Ç: %s",
        orderID,
        FormatPriceBreakdown(width, height, priceDetails),
        FormatPhoneNumber(phone),
    )
    b.sendMessage(tgbotapi.NewMessage(chatID, msgText))

    return orderID, nil
}

func (b *Bot) handleTextureSelection(ctx context.Context, callback *tgbotapi.CallbackQuery) {
	chatID := callback.Message.Chat.ID
    
	// Parse texture ID from callback data
	parts := strings.Split(callback.Data, ":")
	if len(parts) != 2 {
		b.sendError(chatID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç—É—Ä—ã")
		return
	}
	textureID := parts[1]

	// Get dimensions from state
	width, height, err := b.state.GetDimensions(ctx, chatID)
	if err != nil {
		b.logger.Error("Failed to get dimensions",
			zap.Int64("chat_id", chatID),
			zap.Error(err))
		b.sendError(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤")
		return
	}

	// Get texture from storage
	texture, err := b.storage.GetTextureByID(ctx, textureID)
	if err != nil {
		b.logger.Error("Failed to get texture",
			zap.String("texture_id", textureID),
			zap.Error(err))
		b.sendError(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—Å—Ç—É—Ä–µ")
		return
	}

	// Calculate price
	price := CalculatePrice(width, height, texture.PricePerDM2)

	// Save texture selection to state
	if err := b.state.SetTexture(ctx, chatID, textureID, price); err != nil {
		b.logger.Error("Failed to set texture",
			zap.Int64("chat_id", chatID),
			zap.Error(err))
		b.sendError(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç—É—Ä—ã")
		return
	}

	// Send confirmation message with price
	msg := tgbotapi.NewMessage(chatID, fmt.Sprintf(
		"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ–∫—Å—Ç—É—Ä—É: %s\n–¶–µ–Ω–∞: %.2f —Ä—É–±\n\n–ö–æ–≥–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–∫–∞–∑?",
		texture.Name,
		price,
	))
	msg.ReplyMarkup = b.CreateDateSelectionKeyboard()
	b.sendMessage(msg)

	// Update user step
	if err := b.state.SetStep(ctx, chatID, StepDateSelection); err != nil {
		b.logger.Error("Failed to set date selection state",
			zap.Int64("chat_id", chatID),
			zap.Error(err))
	}

	// Delete the original message with texture options
	delMsg := tgbotapi.NewDeleteMessage(chatID, callback.Message.MessageID)
	if _, err := b.bot.Send(delMsg); err != nil {
		b.logger.Warn("Failed to delete message",
			zap.Int("message_id", callback.Message.MessageID),
			zap.Error(err))
	}
}
