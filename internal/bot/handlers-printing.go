package bot

import (
	"context"

	"go.uber.org/zap"
)

// RegisterPrintingHandlers registers all printing-related handlers
func (b *Bot) RegisterPrintingHandlers() {
	b.handlers[StepPrintingSelection] = b.HandlePrintingSelection
	// Add more printing-related steps if needed
}

// HandlePrintingMenu shows the printing products menu with pagination
func (b *Bot) HandlePrintingMenu(ctx context.Context, chatID int64, page int) {
	if err := b.state.SetPrintingPage(ctx, chatID, page); err != nil {
		b.logger.Error("Failed to set printing page",
			zap.Int64("chat_id", chatID),
			zap.Error(err))
	}

	//msg := "üìã –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:"
	//b.SendMessage(tgbotapi.NewMessage(chatID, msg), b.CreatePrintingMenuKeyboard(page))
}

// HandlePrintingNavigation handles pagination for printing products
func (b *Bot) HandlePrintingNavigation(ctx context.Context, chatID int64, action string) {
	currentPage, _ := b.state.GetPrintingPage(ctx, chatID)

	switch action {
	case "–î–∞–ª–µ–µ":
		currentPage++
	case "–ù–∞–∑–∞–¥":
		if currentPage > 1 {
			currentPage--
		}
	}

	b.HandlePrintingMenu(ctx, chatID, currentPage)
}

// HandlePrintingSelection handles selection of a specific printing product
func (b *Bot) HandlePrintingSelection(ctx context.Context, chatID int64, productName string) {
	const operation = "bot.HandlePrintingSelection"

	if err := b.state.SetSelectedProduct(ctx, chatID, productName); err != nil {
		b.logger.Error("Failed to set selected product",
			zap.String("operation", operation),
			zap.Int64("chat_id", chatID),
			zap.Error(err))
		b.SendError(chatID, "–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞")
		return
	}

	/*
	   var msg string
	   var options []string

	   switch productName {
	   case "–í–∏–∑–∏—Ç–∫–∏":
	       msg = "üñ® –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∏–∑–∏—Ç–æ–∫:\n- –†–∞–∑–º–µ—Ä: 90x50 –º–º\n- –ú–∞—Ç–µ—Ä–∏–∞–ª: –º–µ–ª–æ–≤–∞–Ω–Ω–∞—è –±—É–º–∞–≥–∞\n- –¶–≤–µ—Ç–Ω–æ—Å—Ç—å: 4+0 –∏–ª–∏ 4+4"
	       options = []string{"100 —à—Ç", "200 —à—Ç", "500 —à—Ç"}
	   case "–õ–∏—Å—Ç–æ–≤–∫–∏":
	       msg = "üìÑ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–∏—Å—Ç–æ–≤–æ–∫:\n- –§–æ—Ä–º–∞—Ç: –ê4, –ê5, –ê6\n- –ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 130-300 –≥/–º¬≤\n- –¶–≤–µ—Ç–Ω–æ—Å—Ç—å: –ø–æ–ª–Ω–æ—Ü–≤–µ—Ç"
	       options = []string{"–ê4", "–ê5", "–ê6"}
	   // ... other products
	   default:
	       b.SendError(chatID, "–ü—Ä–æ–¥—É–∫—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
	       return
	   }

	   if err := b.state.SetStep(ctx, chatID, StepPrintingSelection); err != nil {
	       b.logger.Error("Failed to set printing selection step",
	           zap.String("operation", operation),
	           zap.Int64("chat_id", chatID),
	           zap.Error(err))
	   }

	   b.SendMessage(tgbotapi.NewMessage(chatID, msg), b.CreateOptionsKeyboard(options))
	*/
}

// HandlePrintingOption handles selection of printing options (quantity, size etc)
func (b *Bot) HandlePrintingOption(ctx context.Context, chatID int64, option string) {
	// Implement option handling logic here
	// This would be called from ProcessMessage when in StepPrintingSelection
}
