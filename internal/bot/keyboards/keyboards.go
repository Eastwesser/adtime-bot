package keyboards

import (
	"adtime-bot/internal/storage"
	"fmt"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func CreateMainMenuKeyboard() tgbotapi.ReplyKeyboardMarkup {
	return tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –∏–∑ –∫–æ–∂–∏"),
			tgbotapi.NewKeyboardButton("–¢–∏–ø–æ–≥—Ä–∞—Ñ–∏—è"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–ü–µ—á–∞—Ç—å –Ω–∞–∫–ª–µ–µ–∫"),
		),
	)
}

func CreateMainMenuKeyboardAgreedTPA() tgbotapi.ReplyKeyboardMarkup {
	return tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üõç –ù–æ–≤—ã–π –∑–∞–∫–∞–∑"),
			tgbotapi.NewKeyboardButton("üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä"),
			tgbotapi.NewKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å"),
		),
	)
}

func CreateConfirmationKeyboard() tgbotapi.ReplyKeyboardMarkup {
	return tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üîÅ –°–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É"),
			tgbotapi.NewKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑"),
		),
	)
}

func CreateContactRequestKeyboard() tgbotapi.ReplyKeyboardMarkup {
	return tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButtonContact("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é"),
		),
	)
}

func CreatePrivacyAgreementKeyboard() tgbotapi.ReplyKeyboardMarkup {
	return tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"),
		),
	)
}

func CreateOrderInitKeyboard() tgbotapi.ReplyKeyboardMarkup {
	return tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"),
		),
	)
}

func CreateDateSelectionKeyboard() tgbotapi.ReplyKeyboardMarkup {
	return tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–°–µ–≥–æ–¥–Ω—è"),
			tgbotapi.NewKeyboardButton("–ó–∞–≤—Ç—Ä–∞"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–ù–∞–∑–∞–¥"),
		),
	)
}

func CreateDimensionsKeyboard() tgbotapi.ReplyKeyboardMarkup {
	return tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("30 40"),
			tgbotapi.NewKeyboardButton("50 40"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–ù–∞–∑–∞–¥"),
		),
	)
}

func CreateDateConfirmationKeyboard() tgbotapi.ReplyKeyboardMarkup {
	return tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üîÅ –°–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É"),
			tgbotapi.NewKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–∞—Ç—É"),
		),
	)
}

func CreatePhoneInputKeyboard() tgbotapi.ReplyKeyboardMarkup {
	return tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButtonContact("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é"),
		),
	)
}

func CreateServiceTypeKeyboard() tgbotapi.ReplyKeyboardMarkup {
	return tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–ù–∞—Ç—É—Ä–∞–ª—å–Ω–∞—è –∫–æ–∂–∞"),
			tgbotapi.NewKeyboardButton("–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–æ–∂–∞"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–ó–∞–º—à–∞"),
			tgbotapi.NewKeyboardButton("–î—Ä—É–≥–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–ù–∞–∑–∞–¥"),
		),
	)
}

func CreateTextureSelectionKeyboard(textures []storage.Texture) tgbotapi.InlineKeyboardMarkup {
	var rows [][]tgbotapi.InlineKeyboardButton
	const maxButtonsPerRow = 2

	if len(textures) == 0 {
		return tgbotapi.NewInlineKeyboardMarkup() // Return empty keyboard if no textures
	}

	// Group textures into rows
	for i := 0; i < len(textures); i += maxButtonsPerRow {
		end := min(i+maxButtonsPerRow, len(textures))

		var row []tgbotapi.InlineKeyboardButton
		for _, texture := range textures[i:end] {
			btn := tgbotapi.NewInlineKeyboardButtonData(
				fmt.Sprintf("%s (%.2f‚ÇΩ/–¥–º¬≤)", texture.Name, texture.PricePerDM2),
				fmt.Sprintf("texture:%s", texture.ID),
			)
			row = append(row, btn)
		}
		rows = append(rows, row)
	}

	// Add cancel button
	cancelBtn := tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∞", "cancel")
	rows = append(rows, []tgbotapi.InlineKeyboardButton{cancelBtn})

	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

func CreatePrintingMenuKeyboard(page int) tgbotapi.ReplyKeyboardMarkup {
	products := []string{"–í–∏–∑–∏—Ç–∫–∏", "–ë–∏—Ä–∫–∏", "–õ–∏—Å—Ç–æ–≤–∫–∏", "–ë—É–∫–ª–µ—Ç—ã", "–ö–∞—Ç–∞–ª–æ–≥–∏", "–ö–∞–ª–µ–Ω–¥–∞—Ä–∏", "–û—Ç–∫—Ä—ã—Ç–∫–∏"}
	return CreatePagedKeyboard(products, page, 4)
}

func CreateVinylServicesKeyboard() tgbotapi.ReplyKeyboardMarkup {
	return tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–ü–µ—á–∞—Ç—å –Ω–∞ –ø–ª–µ–Ω–∫–µ"),
			tgbotapi.NewKeyboardButton("–†–µ–∑–∫–∞ –ø–ª–µ–Ω–∫–∏"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–õ–∞–º–∏–Ω–∞—Ü–∏—è"),
			tgbotapi.NewKeyboardButton("–ö–æ–º–ø–ª–µ–∫—Å"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
		),
	)
}

func CreateOptionsKeyboard(options []string) tgbotapi.ReplyKeyboardMarkup {
	var rows [][]tgbotapi.KeyboardButton

	for i := 0; i < len(options); i += 2 {
		row := make([]tgbotapi.KeyboardButton, 0)
		if i < len(options) {
			row = append(row, tgbotapi.NewKeyboardButton(options[i]))
		}
		if i+1 < len(options) {
			row = append(row, tgbotapi.NewKeyboardButton(options[i+1]))
		}
		rows = append(rows, row)
	}

	rows = append(rows, []tgbotapi.KeyboardButton{
		tgbotapi.NewKeyboardButton("–ù–∞–∑–∞–¥"),
		tgbotapi.NewKeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å"),
	})

	return tgbotapi.NewReplyKeyboard(rows...)
}

func CreatePagedKeyboard(items []string, page, itemsPerPage int) tgbotapi.ReplyKeyboardMarkup {
	start := (page - 1) * itemsPerPage
	end := start + itemsPerPage
	if end > len(items) {
		end = len(items)
	}

	var rows [][]tgbotapi.KeyboardButton
	currentRow := make([]tgbotapi.KeyboardButton, 0, 2)

	for _, item := range items[start:end] {
		btn := tgbotapi.NewKeyboardButton(item)
		currentRow = append(currentRow, btn)

		if len(currentRow) == 2 {
			rows = append(rows, currentRow)
			currentRow = make([]tgbotapi.KeyboardButton, 0, 2)
		}
	}

	if len(currentRow) > 0 {
		rows = append(rows, currentRow)
	}

	navRow := make([]tgbotapi.KeyboardButton, 0)
	if page > 1 {
		navRow = append(navRow, tgbotapi.NewKeyboardButton("–ù–∞–∑–∞–¥"))
	}
	if end < len(items) {
		navRow = append(navRow, tgbotapi.NewKeyboardButton("–î–∞–ª–µ–µ"))
	}
	if len(navRow) > 0 {
		rows = append(rows, navRow)
	}

	rows = append(rows, []tgbotapi.KeyboardButton{
		tgbotapi.NewKeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
	})

	return tgbotapi.NewReplyKeyboard(rows...)
}

func CreateVinylOptionsKeyboard() tgbotapi.ReplyKeyboardMarkup {
	return tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("0.5 –º¬≤"),
			tgbotapi.NewKeyboardButton("1 –º¬≤"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("2 –º¬≤"),
			tgbotapi.NewKeyboardButton("5 –º¬≤"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–ß–µ—Ä–Ω–æ-–±–µ–ª–æ–µ"),
			tgbotapi.NewKeyboardButton("–¶–≤–µ—Ç–Ω–æ–µ"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–ù–∞–∑–∞–¥"),
			tgbotapi.NewKeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å"),
		),
	)
}
