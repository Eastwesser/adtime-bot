package start

import (
	"adtime-bot/internal/bot"
	"adtime-bot/internal/bot/keyboards"
	"context"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"go.uber.org/zap"
)

const (
	startMsg = `–ü—Ä–∏–≤–µ—Ç! üëã

    ‚ö†Ô∏è –ü—Ä–µ–∂–¥–µ —á–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –≤—ã –¥–æ–ª–∂–Ω—ã —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å:
    1. –ù–∞—à–µ–π –ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
    2. Telegram Bot Privacy Policy (TPA)
    
    –ò—Å–ø–æ–ª—å–∑—É—è –±–æ—Ç–∞, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —ç—Ç–∏–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏.`

	privacyPolicyMsg = `üîê <b>–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</b>

    –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å:
    1. –ù–∞—à–µ–π –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
    2. Telegram Bot Privacy Policy (TPA)

    <u>–ú—ã —Å–æ–±–∏—Ä–∞–µ–º –∏ —Ö—Ä–∞–Ω–∏–º:</u>
    - –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞)
    - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–∫–∞–∑–∞ (—Ä–∞–∑–º–µ—Ä—ã, —Ç–µ–∫—Å—Ç—É—Ä–∞)
    - –î–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞

    <u>Telegram TPA —Ç—Ä–µ–±—É–µ—Ç:</u>
    - –Ø–≤–Ω–æ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö
    - –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–ø—Ä–æ—Å—É
    - –°–æ–±–ª—é–¥–µ–Ω–∏—è GDPR –∏ –¥—Ä—É–≥–∏—Ö —Ä–µ–≥—É–ª—è—Ü–∏–π

    üìú –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç: %s`
)

type StartHandler struct {
	logger       *zap.Logger
	botapi       *tgbotapi.BotAPI
	stateManager StateManager
	pgStorage    PgStorage
}

func New(
	logger *zap.Logger,
	botapi *tgbotapi.BotAPI,
	stateManager StateManager,
	pgStorage PgStorage,
) *StartHandler {
	return &StartHandler{
		logger:       logger,
		botapi:       botapi,
		stateManager: stateManager,
		pgStorage:    pgStorage,
	}
}

func (s *StartHandler) Handle(ctx context.Context, msg *tgbotapi.Message) {
	chatId := msg.Chat.ID
	agreed, phone, err := s.pgStorage.GetUserAgreement(ctx, chatId)
	if err != nil {
		s.logger.Error("Failed to check user agreement", zap.Error(err))
	}

	if agreed && phone != "" {
		// If user has signed TPA, show menu
		s.showMainMenu(ctx, chatId, phone)
		return
	}

	// send start msg
	s.sendMessage(tgbotapi.NewMessage(chatId, startMsg))
	s.showPrivacyPolicy(chatId)

	if err := s.stateManager.SetStep(ctx, chatId, bot.StepPrivacyAgreement); err != nil {
		s.logger.Error("Failed to set privacy agreement state",
			zap.Int64("chat_id", chatId),
			zap.Error(err))
	}
}

func (s *StartHandler) sendMessage(msg tgbotapi.MessageConfig) {
	// Send new message
	_, err := s.botapi.Send(msg)
	if err != nil {
		s.logger.Error("Failed to send message",
			zap.Int64("chatID", msg.ChatID),
			zap.String("text", msg.Text),
			zap.Error(err))
		return
	}
}

func (s *StartHandler) showPrivacyPolicy(chatID int64) {
	msg := tgbotapi.NewMessage(
		chatID,
		fmt.Sprintf(privacyPolicyMsg, "https://telegram.org/privacy-tpa"),
	)
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = keyboards.CreatePrivacyAgreementKeyboard()
	s.sendMessage(msg)
}

// showMainMenu displays the main menu with options for authenticated users
func (s *StartHandler) showMainMenu(ctx context.Context, chatID int64, phone string) {
	// Clear any previous order state while keeping essential user data
	if err := s.stateManager.ResetDialogState(ctx, chatID); err != nil {
		s.logger.Error("Failed to reset dialog state",
			zap.Int64("chat_id", chatID),
			zap.Error(err))
		// Continue despite the error as it's not critical for showing the menu
	}

	msg := tgbotapi.NewMessage(chatID, fmt.Sprintf(
		"üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n"+
			"–í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä: %s\n"+
			"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
		phone))

	msg.ReplyMarkup = keyboards.CreateMainMenuKeyboard()
	msg.ParseMode = "Markdown"

	s.sendMessage(msg)
}
