package bot

import (
	"context"
	"fmt"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"go.uber.org/zap"
)

func (b *Bot) HandlePrivacyAgreement(ctx context.Context, chatID int64, text string) {
	if text != "‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" {
        b.SendError(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å\" —á—Ç–æ–±—ã —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏")
        return
    }

    // Get username for notification
    chat, err := b.bot.GetChat(tgbotapi.ChatInfoConfig{
        ChatConfig: tgbotapi.ChatConfig{
            ChatID: chatID,
        },
    })
    username := ""
    if err == nil && chat.UserName != "" {
        username = chat.UserName
        // Send notification to channel
        b.NotifyPrivacyAgreement(ctx, username)
    }

	msg := tgbotapi.NewMessage(chatID, "–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–≥–ª–∞—Å–∏–µ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.")
    msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
        tgbotapi.NewKeyboardButtonRow(
            tgbotapi.NewKeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"),
        ),
    )

	b.SendMessage(msg)
    if err := b.state.SetStep(ctx, chatID, StepServiceSelection); err != nil {
        b.logger.Error("Failed to set service selection state",
            zap.Int64("chat_id", chatID),
            zap.Error(err))
    }
}

func (b *Bot) HandleServiceSelection(ctx context.Context, chatID int64, text string) {
	if text != "‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑" {
		b.SendError(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑\" —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
		return
	}

	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å–ª—É–≥–∏:")
	msg.ReplyMarkup = b.CreateServiceTypeKeyboard()
	b.SendMessage(msg)
	
	if err := b.state.SetStep(ctx, chatID, StepServiceType); err != nil {
		b.logger.Error("Failed to set service type state",
			zap.Int64("chat_id", chatID),
			zap.Error(err))
	}
}

func (b *Bot) HandleServiceType(ctx context.Context, chatID int64, text string) {
    validServices := map[string]bool{
        "–ù–∞—Ç—É—Ä–∞–ª—å–Ω–∞—è –∫–æ–∂–∞": true,
        "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–æ–∂–∞": true,
        "–ó–∞–º—à–∞": true,
        "–î—Ä—É–≥–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞": true,
    }

	if !validServices[text] {
        if text == "‚ùå –û—Ç–º–µ–Ω–∞" {
            b.HandleCancel(ctx, chatID)
            return
        }
        b.SendError(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        return
    }

	if err := b.state.SetService(ctx, chatID, text); err != nil {
        b.logger.Error("Failed to set service",
            zap.Int64("chat_id", chatID),
            zap.Error(err))
        b.SendError(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏")
        return
    }

    // –û—Å–æ–±—ã–π —Å–ª—É—á–∞–π –¥–ª—è "–î—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç—É—Ä—ã"
    if text == "–î—Ä—É–≥–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞" {
        msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Ç–µ–∫—Å—Ç—É—Ä—É:")
        msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
            tgbotapi.NewKeyboardButtonRow(
                tgbotapi.NewKeyboardButton("–ù–∞–∑–∞–¥"),
            ),
        )

        b.SendMessage(msg)
        if err := b.state.SetStep(ctx, chatID, CustomTextureInput); err != nil {
            b.logger.Error("Failed to set custom texture input state",
                zap.Int64("chat_id", chatID),
                zap.Error(err))
        }
        return
    }

    // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ —Å—Ä–∞–∑—É –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
    msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É –∏ –¥–ª–∏–Ω—É –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 30 40)\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 80x50 —Å–º")
    msg.ReplyMarkup = b.CreateDimensionsKeyboard()
    b.SendMessage(msg)
    
    if err := b.state.SetStep(ctx, chatID, StepDimensions); err != nil {
        b.logger.Error("Failed to set dimensions state",
            zap.Int64("chat_id", chatID),
            zap.Error(err))
    }
}

func (b *Bot) HandleCustomTextureInput(ctx context.Context, chatID int64, text string) {
    if text == "–ù–∞–∑–∞–¥" {
        msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å–ª—É–≥–∏:")
        msg.ReplyMarkup = b.CreateServiceTypeKeyboard()
        b.SendMessage(msg)
        b.state.SetStep(ctx, chatID, StepServiceType)
        return
    }

    if len(text) < 3 {
        b.HandleError(ctx, chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç—É—Ä—ã (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞)")
        return
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é —Ç–µ–∫—Å—Ç—É—Ä—É
    if err := b.state.SetServiceType(ctx, chatID, text); err != nil {
        b.logger.Error("Failed to set custom texture",
            zap.Int64("chatID", chatID),
            zap.Error(err))
        b.HandleError(ctx, chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç—É—Ä—ã")
        return
    }

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ä–∞–∑–º–µ—Ä–æ–≤
    msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É –∏ –¥–ª–∏–Ω—É –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 30 40)\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 80x50 —Å–º")
    msg.ReplyMarkup = b.CreateDimensionsKeyboard()
    b.SendMessage(msg)
    
    if err := b.state.SetStep(ctx, chatID, StepDimensions); err != nil {
        b.logger.Error("Failed to set dimensions state",
            zap.Int64("chatID", chatID),
            zap.Error(err))
    }
}

func (b *Bot) HandleDimensionsSize(ctx context.Context, chatID int64, text string) {
	// Handle back button first
    if text == "–ù–∞–∑–∞–¥" {
        b.HandleCancel(ctx, chatID)
        return
    }
    
    // Process the dimensions input
    parts := strings.Split(text, " ")
    if len(parts) != 2 {
        b.HandleError(ctx, chatID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É –∏ –¥–ª–∏–Ω—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 30 40)")
        return
    }

	width, err := strconv.Atoi(parts[0])
    if err != nil || width <= 0 || width > 80 {
        b.HandleError(ctx, chatID, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —à–∏—Ä–∏–Ω–∞. –î–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: 1-80 —Å–º")
        return
    }

	height, err := strconv.Atoi(parts[1])
    if err != nil || height <= 0 || height > 50 {
        b.HandleError(ctx, chatID, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏–Ω–∞. –î–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: 1-50 —Å–º")
        return
    }

	if err := b.state.SetDimensions(ctx, chatID, width, height); err != nil {
        b.logger.Error("Failed to set dimensions",
            zap.Int64("chatID", chatID),
            zap.Error(err))
        b.HandleError(ctx, chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤")
        return
    }

	msg := tgbotapi.NewMessage(chatID, "–ö–æ–≥–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–∫–∞–∑?")
    msg.ReplyMarkup = b.CreateDateSelectionKeyboard()
    b.SendMessage(msg)
	
	if err := b.state.SetStep(ctx, chatID, StepDateSelection); err != nil {
        b.logger.Error("Failed to set date selection state",
            zap.Int64("chatID", chatID),
            zap.Error(err))
    }
}

func (b *Bot) HandleDateSelection(ctx context.Context, chatID int64, text string) {
	var selectedDate string
	
	switch text {
	case "–°–µ–≥–æ–¥–Ω—è":
		selectedDate = time.Now().Format("02.01.2006")
	case "–ó–∞–≤—Ç—Ä–∞":
		selectedDate = time.Now().Add(24 * time.Hour).Format("02.01.2006")
	case "–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é":
		msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
		b.SendMessage(msg)
		if err := b.state.SetStep(ctx, chatID, StepManualDateInput); err != nil {
			b.logger.Error("Failed to set manual date input state",
				zap.Int64("chat_id", chatID),
				zap.Error(err))
		}
		return
	default:
		b.SendError(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
		return
	}

	if err := b.state.SetDate(ctx, chatID, selectedDate); err != nil {
		b.logger.Error("Failed to set date",
			zap.Int64("chat_id", chatID),
			zap.Error(err))
		b.SendError(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–∞—Ç—ã")
		return
	}

	b.ConfirmDateSelection(ctx, chatID, selectedDate)
}

func (b *Bot) HandleManualDateInput(ctx context.Context, chatID int64, text string) {
	// –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è –≥–æ–¥–∞
    if len(text) == 8 { // —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì
        text = text[:6] + "20" + text[6:]
    }
    
    _, err := time.Parse("02.01.2006", text)
    if err != nil {
        b.SendError(chatID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        return
    }

	inputDate, _ := time.Parse("02.01.2006", text)
	if inputDate.Before(time.Now().Truncate(24 * time.Hour)) {
		b.SendError(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤ –±—É–¥—É—â–µ–º")
		return
	}

	if err := b.state.SetDate(ctx, chatID, text); err != nil {
		b.logger.Error("Failed to set manual date",
			zap.Int64("chat_id", chatID),
			zap.Error(err))
		b.SendError(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞—Ç—ã")
		return
	}

	b.ConfirmDateSelection(ctx, chatID, text)
}

func (b *Bot) ConfirmDateSelection(ctx context.Context, chatID int64, date string) {
	days := b.CalculateWorkingDays(date)

	text := fmt.Sprintf("–û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: %s\n–î–æ —ç—Ç–æ–π –¥–∞—Ç—ã %d —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π (–±–µ–∑ —É—á—ë—Ç–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö –∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤).", date, days)

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üîÅ –°–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É"),
			tgbotapi.NewKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–∞—Ç—É"),
		),
	)
	b.SendMessage(msg)
	if err := b.state.SetStep(ctx, chatID, StepDateConfirmation); err != nil {
		b.logger.Error("Failed to set date confirmation state",
			zap.Int64("chat_id", chatID),
			zap.Error(err))
	}
}

func (b *Bot) CalculateWorkingDays(date string) int {
	targetDate, _ := time.Parse("02.01.2006", date)
	now := time.Now()

	days := 0
	for d := now; d.Before(targetDate); d = d.AddDate(0, 0, 1) {
		if d.Weekday() != time.Saturday && d.Weekday() != time.Sunday {
			days++
		}
	}
	return days
}

func (b *Bot) HandleDateConfirmation(ctx context.Context, chatID int64, text string) {
    switch text {
    case "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–∞—Ç—É":
        msg := tgbotapi.NewMessage(chatID, "–ö–∞–∫ –≤–∞–º —É–¥–æ–±–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ?")
        msg.ReplyMarkup = b.CreatePhoneInputKeyboard()
        b.SendMessage(msg)
        
        if err := b.state.SetStep(ctx, chatID, StepContactMethod); err != nil {
            b.logger.Error("Failed to set contact method state",
                zap.Int64("chat_id", chatID),
                zap.Error(err))
        }
        
    case "üîÅ –°–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É":
        // Go back to date selection
        msg := tgbotapi.NewMessage(chatID, "–ö–æ–≥–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–∫–∞–∑?")
        msg.ReplyMarkup = b.CreateDateSelectionKeyboard()
        b.SendMessage(msg)
        
        if err := b.state.SetStep(ctx, chatID, StepDateSelection); err != nil {
            b.logger.Error("Failed to set date selection state",
                zap.Int64("chat_id", chatID),
                zap.Error(err))
        }
        
    default:
        b.SendError(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    }
}

func (b *Bot) HandleContactMethod(ctx context.Context, chatID int64, text string) {
    switch text {
    case "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç":
        msg := tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º'")
        msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
            tgbotapi.NewKeyboardButtonRow(
                tgbotapi.NewKeyboardButtonContact("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º"),
            ),
            tgbotapi.NewKeyboardButtonRow(
                tgbotapi.NewKeyboardButton("–ù–∞–∑–∞–¥"),
            ),
        )
        b.SendMessage(msg)
        
    case "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é":
        msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79123456789 –∏–ª–∏ 89123456789:")
        b.SendMessage(msg)
        b.state.SetStep(ctx, chatID, StepPhoneNumber)
        
    case "–ù–∞–∑–∞–¥":
        // Go back to previous step
        b.HandleDateConfirmation(ctx, chatID, "üîÅ –°–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É")
        
    default:
        b.SendError(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
    }
}

func (b *Bot) HandlePhoneNumber(ctx context.Context, chatID int64, text string) {

    normalized := NormalizePhoneNumber(text)
    
    if !IsValidPhoneNumber(normalized) {
        b.SendError(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79161234567 –∏–ª–∏ 89123456789)")
        return
    }

    b.logger.Debug("Phone number validation",
        zap.String("input", text),
        zap.String("normalized", normalized),
        zap.Bool("is_valid", IsValidPhoneNumber(normalized)))

    // Create and save the order
    orderID, err := b.CreateOrder(ctx, chatID, normalized)
    if err != nil {
        b.logger.Error("Failed to create order",
            zap.Int64("chat_id", chatID),
            zap.String("phone", normalized),
            zap.Error(err))
        b.SendError(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    }

    // Clear user state
    if err := b.state.ClearState(ctx, chatID); err != nil {
        b.logger.Error("Failed to clear user state",
            zap.Int64("chat_id", chatID),
            zap.Error(err))
    }

    // Send final confirmation
    msg := tgbotapi.NewMessage(chatID,
        fmt.Sprintf("‚úÖ –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #%d\n\n–° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", orderID))
    b.SendMessage(msg)
}
